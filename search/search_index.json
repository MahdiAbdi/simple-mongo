{"docs":[{"location":"/index.html","text":"","title":"simple-mongo"},{"location":"/index.html#simple-mongo","text":"A small library for easy usage of the mongo-scala-driver.\nImplement the DAO Pattern for easy database usage.\nEnhanced BSON conversion support.","title":"simple-mongo"},{"location":"/index.html#additional-documentation","text":"Documentation for mongo-scala-driver\nDocumentation for MongoDB","title":"Additional Documentation"},{"location":"/index.html#dependency-setup","text":"sbt libraryDependencies += \"com.sfxcode.nosql\" %% \"simple-mongo\" % \"1.3.0\" Maven <dependency>\n  <groupId>com.sfxcode.nosql</groupId>\n  <artifactId>simple-mongo_2.12</artifactId>\n  <version>1.3.0</version>\n</dependency> Gradle dependencies {\n  compile group: 'com.sfxcode.nosql', name: 'simple-mongo_2.12', version: '1.3.0'\n}","title":"Dependency Setup"},{"location":"/index.html#licence","text":"Apache 2","title":"Licence"},{"location":"/tutorial/setup.html","text":"","title":"Tutorial Part 1 - Setup"},{"location":"/tutorial/setup.html#tutorial-part-1-setup","text":"","title":"Tutorial Part 1 - Setup"},{"location":"/tutorial/setup.html#mongodb-demo-database","text":"","title":"MongoDB Demo Database"},{"location":"/tutorial/setup.html#setup","text":"Use Import from MongoDB Website:\nRestaurant Data Import","title":"Setup"},{"location":"/tutorial/setup.html#sample-document","text":"A sample document in the restaurants collection:\n{\n  \"address\": {\n     \"building\": \"1007\",\n     \"coord\": [ -73.856077, 40.848447 ],\n     \"street\": \"Morris Park Ave\",\n     \"zipcode\": \"10462\"\n  },\n  \"borough\": \"Bronx\",\n  \"cuisine\": \"Bakery\",\n  \"grades\": [\n     { \"date\": { \"$date\": 1393804800000 }, \"grade\": \"A\", \"score\": 2 },\n     { \"date\": { \"$date\": 1378857600000 }, \"grade\": \"A\", \"score\": 6 },\n     { \"date\": { \"$date\": 1358985600000 }, \"grade\": \"A\", \"score\": 10 },\n     { \"date\": { \"$date\": 1322006400000 }, \"grade\": \"A\", \"score\": 9 },\n     { \"date\": { \"$date\": 1299715200000 }, \"grade\": \"B\", \"score\": 14 }\n  ],\n  \"name\": \"Morris Park Bake Shop\",\n  \"restaurant_id\": \"30075445\"\n}","title":"Sample Document"},{"location":"/tutorial/setup.html#scala-case-classes-for-restaurant-document","text":"case class Address(street: String, building: String,\n  zipcode: String, coord: List[Double])\n\ncase class Grade(date: Date, grade: String, score: Int)\n\ncase class Restaurant(restaurant_id: String, name: String,\n  borough: String, cuisine: String,\n  grades: List[Grade], address: Address,\n  _id: ObjectId = new ObjectId())","title":"Scala case classes for Restaurant document"},{"location":"/tutorial/database.html","text":"","title":"Tutorial Part 2 - Database"},{"location":"/tutorial/database.html#tutorial-part-2-database","text":"","title":"Tutorial Part 2 - Database"},{"location":"/tutorial/database.html#info","text":"The database provides static import to our DAO objects.","title":"Info"},{"location":"/tutorial/database.html#imports","text":"import java.util.Date\n\nimport com.sfxcode.nosql.mongo.MongoDAO\nimport com.sfxcode.nosql.mongo.database.DatabaseProvider\nimport org.bson.codecs.configuration.CodecRegistries._\nimport org.mongodb.scala.bson.ObjectId\nimport org.mongodb.scala.bson.codecs.Macros._","title":"Imports"},{"location":"/tutorial/database.html#case-classes-for-document-representation","text":"case class Address(street: String, building: String,\n  zipcode: String, coord: List[Double])\n\ncase class Grade(date: Date, grade: String, score: Int)\n\ncase class Restaurant(restaurant_id: String, name: String,\n  borough: String, cuisine: String,\n  grades: List[Grade], address: Address,\n  _id: ObjectId = new ObjectId())","title":"case classes for document representation"},{"location":"/tutorial/database.html#registry-and-database","text":"scala-mongo-driver use a registry pattern for deserialization\nprivate val registry = fromProviders(\n  classOf[Restaurant],\n  classOf[Address], classOf[Grade])\n\nval database = DatabaseProvider(\"test\", registry)","title":"Registry and database"},{"location":"/tutorial/database.html#restaurant-dao","text":"object RestaurantDAO extends MongoDAO[Restaurant](database, \"restaurants\")","title":"Restaurant DAO"},{"location":"/tutorial/database.html#usage","text":"Create Database object\nobject RestaurantDatabase {\n\n// case classes ...\n\n// registry and database setup ...\n\nobject RestaurantDAO extends MongoDAO[Restaurant](database, \"restaurants\")\n\n// more DAO objects\n}\nStatic Import and Application\n// static import of needed DAO objects\n   import my.namespace.RestaurantDatabase._\n   \n   // ... some code","title":"Usage"},{"location":"/tutorial/application.html","text":"","title":"Tutorial Part 3 - Application"},{"location":"/tutorial/application.html#tutorial-part-3-application","text":"","title":"Tutorial Part 3 - Application"},{"location":"/tutorial/application.html#info","text":"This Demo Application should demonstrate the basic usage of simple-mongo.","title":"Info"},{"location":"/tutorial/application.html#imports","text":"import java.util.Date\n\nimport com.sfxcode.nosql.mongo.MongoDAO\nimport com.sfxcode.nosql.mongo.database.DatabaseProvider\nimport org.bson.codecs.configuration.CodecRegistries._\nimport org.mongodb.scala.bson.ObjectId\nimport org.mongodb.scala.bson.codecs.Macros._","title":"Imports"},{"location":"/tutorial/application.html#simple-application","text":"object RestaurantDemoApp extends App {\n  // find specific restaurant key and value as Option Result\n  val restaurant = RestaurantDAO.find(\"name\", \"Dj Reynolds Pub And Restaurant\")\n\n  println(restaurant.get)\n\n  private val filter = Map(\"address.zipcode\" -> \"10075\", \"cuisine\" -> \"Italian\")\n  // find restaurants by filter - use implicit map to document conversion\n  // as List result\n  val restaurants: List[Restaurant] = RestaurantDAO.find(filter)\n\n  restaurants.sortBy(r => r.name).foreach(r => println(r.name))\n\n}","title":"Simple Application"},{"location":"/dao/mongo_dao.html","text":"","title":"MongoDAO - Overview"},{"location":"/dao/mongo_dao.html#mongodao-overview","text":"","title":"MongoDAO - Overview"},{"location":"/dao/mongo_dao.html#info","text":"MongoDAO is the core of this framework. The DAO Pattern simplifies database usage.\nThe MongoDAO object holds a reference to a MongoCollection and adds functions for easy collection handling.\nAll functions support synchronous result handling (add Result to function name, e.g. drop -> dropResult, insert ->insertResult).","title":"Info"},{"location":"/dao/mongo_dao.html#features","text":"MongoDAO Base (Drop, Index, Count) MongoDAO CRUD (Create, Insert, Delete) MongoDAO Search (Search, Distinct, Aggregate)","title":"Features"},{"location":"/dao/mongo_dao.html#creation","text":"A MongoDatabase and a collection name is needed.\nA Type Parameter is used for automatic Document to Class conversion (case classes needs to be registered).\nobject RestaurantDAO extends MongoDAO[Restaurant](database, \"restaurants\")","title":"Creation"},{"location":"/dao/base.html","text":"","title":"MongoDAO - Base Functions"},{"location":"/dao/base.html#mongodao-base-functions","text":"","title":"MongoDAO - Base Functions"},{"location":"/dao/base.html#info","text":"Base Collection functions. All functions support synchronous result handling (add Result to function name, e.g. drop -> dropResult).","title":"Info"},{"location":"/dao/base.html#drop","text":"Drop Collection.\ndef drop(): Observable[Completed]","title":"Drop"},{"location":"/dao/base.html#count","text":"Count of collection with optional filter.\ndef count(filter: Bson = Document()): Observable[Long]","title":"Count"},{"location":"/dao/base.html#indexes","text":"def createIndex(key: Bson, options: IndexOptions = IndexOptions()): SingleObservable[String]\n\n// Simple Index creation\ndef createIndexForField(field: String, sortAscending: Boolean = true): SingleObservable[String]\n\ndef dropIndex(keys: Bson): SingleObservable[Completed]\n\n// Simple Index delete\ndef dropIndexForName(name: String): SingleObservable[Completed]","title":"Indexes"},{"location":"/dao/crud.html","text":"","title":"MongoDAO - CRUD Functions"},{"location":"/dao/crud.html#mongodao-crud-functions","text":"","title":"MongoDAO - CRUD Functions"},{"location":"/dao/crud.html#info","text":"CRUD Collection functions. All functions support synchronous result handling (add Result to function name, e.g. drop -> dropResult).","title":"Info"},{"location":"/dao/crud.html#create","text":"def insertOne(value: A): Observable[Completed]\n\ndef insertOne(value: A), options: InsertOneOptions: Observable[Completed]\n\ndef insertMany(values: Seq[A]): Observable[Completed]\n\ndef insertMany(values: Seq[A], options: InsertManyOptions): Observable[Completed]","title":"Create"},{"location":"/dao/crud.html#update","text":"def replaceOne(value: A): Observable[UpdateResult]\n\ndef replaceOne(value: A, options: ReplaceOptions): Observable[UpdateResult]","title":"Update"},{"location":"/dao/crud.html#delete","text":"def deleteOne(value: A): Observable[DeleteResult]\n\ndef deleteOne(filter: Bson): Observable[DeleteResult]\n\ndef deleteMany(filter: Bson): Observable[DeleteResult]\n\ndef deleteAll(): Observable[DeleteResult]","title":"Delete"},{"location":"/dao/search.html","text":"","title":"MongoDAO - Search Functions"},{"location":"/dao/search.html#mongodao-search-functions","text":"","title":"MongoDAO - Search Functions"},{"location":"/dao/search.html#info","text":"","title":"Info"},{"location":"/dao/search.html#demo","text":"","title":"Demo"},{"location":"/dao/search.html#setup-imports","text":"// Filter helper functions\nimport com.sfxcode.nosql.mongo.Filter._\n// sort helper functions\nimport com.sfxcode.nosql.mongo.Sort._\n// implicits like Document from Map ...\nimport com.sfxcode.nosql.mongo._","title":"Setup imports"},{"location":"/dao/search.html#execute-search","text":"val females = PersonDAO.find(Map(\"gender\" -> \"female\"), \n    sortByKey(\"name\")).resultList()","title":"Execute Search"},{"location":"/features/aggregation.html","text":"","title":"Features - Aggregation"},{"location":"/features/aggregation.html#features-aggregation","text":"","title":"Features - Aggregation"},{"location":"/features/aggregation.html#info","text":"MongoDB support an easy to use Aggregation Handling.","title":"Info"},{"location":"/features/aggregation.html#demo","text":"","title":"Demo"},{"location":"/features/aggregation.html#setup-imports","text":"import com.sfxcode.nosql.mongo.Field._\nimport com.sfxcode.nosql.mongo.Filter._\nimport com.sfxcode.nosql.mongo.Sort._\nimport com.sfxcode.nosql.mongo._","title":"Setup imports"},{"location":"/features/aggregation.html#define-stages","text":"val filterStage: Bson = filter(and(\n  equal(\"gender\", \"female\"),\n  notNullFilter(\"balance\")))\n\nval groupStage: Bson = group(\n  Map(\"age\" -> \"$age\"),\n  sumField(\"balance\"), firstField(\"age\"))\n\nval sortStage: Bson = sort(sortByKey(\"age\"))","title":"Define stages"},{"location":"/features/aggregation.html#execute-aggregation","text":"Important In most cases we have to use the RAW attribute, because the aggregation result not follows the case class pattern. RAW returns always Documents instead of case classes.\nval aggregator = List(filterStage, groupStage, sortStage)\n\nval aggregated = PersonDAO.Raw.findAggregated(aggregator).resultList()","title":"Execute Aggregation"},{"location":"/features/aggregation.html#convert-result","text":"For easy result handling, using the implicit Document to Map conversion can be useful.\nval list: List[Map[String, Any]] = aggregated","title":"Convert Result"},{"location":"/features/relationships.html","text":"","title":"Features - Relationships"},{"location":"/features/relationships.html#features-relationships","text":"","title":"Features - Relationships"},{"location":"/features/relationships.html#info","text":"Normal Relationship handling is the use of embedded documents. However, sometimes there is a need for relationsips beetween collections. There is a Relations Trait to be used in case classes for easy relationship handling.","title":"Info"},{"location":"/features/relationships.html#relations-trait","text":"The Relations trait extends DAO case classes with relationship functions.\nrelatedRecordForOneToOne (OneToOneRelationship and reference vlue needed) relatedRecordsForOneToMany (OneToManyRelationship and reference vlue needed)","title":"Relations trait"},{"location":"/features/relationships.html#demo","text":"Simple Setup.\nUser Collection(should have one login and multiple friends) Login Collection Friend Collection\ncase class User(id: Long, name: String, loginId: String)\n  case class Login(id: String, email: String, password: String)\n  case class Friend(id: Long, name: String, userId: Long)\n  \n  object UserDAO extends MongoDAO[User](database, \"user\") \n  object LoginDAO extends MongoDAO[Login](database, \"login\")\n  object FriendDAO extends MongoDAO[Friend](database, \"friend\")\nFor relationship setup we create two Relationships in the UserDAO.\nOneToOne loginRelation (LoginDAO, key is id in user collection) OneToMany friendsRelation (FriendDAO, key is userId in friend collection)\nobject UserDAO extends MongoDAO[User](database, \"user\") {\n  lazy val loginRelation = OneToOneRelationship(LoginDAO, \"id\")\n  lazy val friendsRelation = OneToManyRelationship(FriendDAO, \"userId\")\n}\nWe extend the User case class with the Relations trait and add relation specific functions.\nlogin (create an Option of Login) friends (create a List of Friend)\ncase class User(id: Long, name: String, loginId: String) extends Relations {\n\n  def login: Option[Login] = relatedRecordForOneToOne(UserDAO.loginRelation, loginId)\n\n  def friends: List[Friend] = relatedRecordForOneToMany(UserDAO.friendsRelation, id)\n\n}","title":"Demo"},{"location":"/changes.html","text":"","title":"Version History"},{"location":"/changes.html#version-history","text":"","title":"Version History"},{"location":"/changes.html#current-version","text":"","title":"Current Version"},{"location":"/changes.html#history","text":"# Changes #\n\n## Versions\n\n### 1.2.0\n\n* Relations added\n* Field added (used in Aggregation)\n* Aggregation Specs added\n* implicit Document(s) to Map(s) Conversion\n* method sort in Sort object renamed to sortByKey\n\n### 1.1.0\n\n* update mongo-scala-driver to 2.3.0\n* update to Scala 2.12.6\n\n### 1.0.5\n\n* update to Scala 2.12.5\n\n### 1.0.4\n\n* update to mongo scala driver 2.2.1\n\n### 1.0.3\n\n* gh-pages added\n* test fixes\n\n### 1.0.2\n\n* update to mongo scala driver 2.2.0\n\n### 1.0.1\n\n* BuildInfo added\n* dependencies updated\n* plugins updated\n* Index support addded","title":"History"},{"location":"/features/converter.html","text":"","title":"Features - BSON Converter"},{"location":"/features/converter.html#features-bson-converter","text":"","title":"Features - BSON Converter"},{"location":"/features/converter.html#info","text":"","title":"Info"}]}